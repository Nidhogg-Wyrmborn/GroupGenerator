# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import hashlib
import requests

class MainWindowWidget(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super(MainWindowWidget, self).__init__(parent)

        self.titleBar = QtWidgets.QLabel(self)
        self.titleBar.setGeometry(QtCore.QRect(12, 10, 771, 41))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.titleBar.setFont(font)
        self.titleBar.setFrameShape(QtWidgets.QFrame.Box)
        self.titleBar.setAlignment(QtCore.Qt.AlignCenter)
        self.titleBar.setObjectName("titleBar")
        self.changeLog = QtWidgets.QLabel(self)
        self.changeLog.setGeometry(QtCore.QRect(12, 50, 771, 361))
        self.changeLog.setFrameShape(QtWidgets.QFrame.Box)
        self.changeLog.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.changeLog.setObjectName("changeLog")
        self.latestModules = QtWidgets.QLabel(self)
        self.latestModules.setGeometry(QtCore.QRect(12, 410, 771, 131))
        self.latestModules.setFrameShape(QtWidgets.QFrame.Box)
        self.latestModules.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.latestModules.setObjectName("latestModules")

        self.retranslateUi()

        self.setChangelog()

    def GET(self, link):
        return requests.get(link, verify=False)

    def setChangelog(self):
        _translate = QtCore.QCoreApplication.translate
        ChangeLog = self.GET("https://raw.githubusercontent.com/Nidhogg-Wyrmborn/GroupGenerator/main/changelog.chlg").content.decode()
        ChangeLog = ChangeLog.split("\n")
        ChangeLog = '\n'.join(ChangeLog[0:27])
        self.changeLog.setText(_translate("MainWindow", f"{ChangeLog}"))

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate

        self.titleBar.setText(_translate("MainWindow", "School Utilities"))
        self.changeLog.setText(_translate("MainWindow", "{ChangeLog} [CUTOFF=27 lines]"))
        self.latestModules.setText(_translate("MainWindow", "{latest iter([Module] - [Author] : [SalesPitch])}"))


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QStackedWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # set central widget
        MainWindow.setCentralWidget(self.centralwidget)

        self.MW = MainWindowWidget()
        self.centralwidget.addWidget(self.MW)
        self.centralwidget.setCurrentWidget(self.MW)

        # create menubar and menu
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuModules = QtWidgets.QMenu(self.menuFile)
        self.menuModules.setObjectName("menuModules")

        # set menubar
        MainWindow.setMenuBar(self.menubar)

        # create status bar
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # create actions and setup names
        self.actionCheck_For_Updates = QtWidgets.QAction(MainWindow)
        self.actionCheck_For_Updates.setObjectName("actionCheck_For_Updates")
        self.action_ModuleStore = QtWidgets.QAction(MainWindow)
        self.action_ModuleStore.setObjectName("action_ModuleStore")
        
        # create placeholder
        self.action_ModulePlaceHolder = QtWidgets.QAction(MainWindow)
        self.action_ModulePlaceHolder.setObjectName("action_ModulePlaceHolder")

        # create rest of the actions
        self.actionReport = QtWidgets.QAction(MainWindow)
        self.actionReport.setObjectName("actionReport")
        self.actionContact = QtWidgets.QAction(MainWindow)
        self.actionContact.setObjectName("actionContact")
        self.actionQuit = QtWidgets.QAction(MainWindow)
        self.actionQuit.setObjectName("actionQuit")
        self.menuModules.addAction(self.action_ModuleStore)
        self.menuModules.addSeparator()

        # add installed modules to menubar
        # add placeholder to menubar # OBSOLETE
        #self.menuModules.addAction(self.action_ModulePlaceHolder) # OBSOLETE
        self.setupMenubar()

        # add rest of actions
        self.menuFile.addAction(self.actionCheck_For_Updates)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.menuModules.menuAction())
        self.menuFile.addAction(self.actionReport)
        self.menuFile.addAction(self.actionContact)
        self.menubar.addAction(self.menuFile.menuAction())

        self.importModules()

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def setupMenubar(self):
        pass

    def hashify(self, item):
        if not isinstance(item, bytes):
            try:
                item = item.encode()
            except Exception as e:
                raise Exception("Cannot encode item (HASHIFY), "+str(e)+"\n\n"+str(repr(item)))
        return hashlib.sha256(item).hexdigest()

    def importModules(self):
        pass #self.importModule("GroupGenerator#0001")

    def importModule(self, ModuleID):
        with open(f"{ModuleID.split('#')[0]}.MOD", 'r') as f:
            ModuleContent = ''.join(f.readlines())

        ModuleHash = self.hashify(ModuleContent)
        print(ModuleHash)

        target = f"https://raw.githubusercontent.com/Nidhogg-Wyrmborn/GroupGenerator/main/Dist/Modules/{ModuleID.replace('#', '%23')}/{ModuleID.split('#')[0]}.MODHash"
        print(target)

        with requests.get(target, verify=False) as r:
            onlineContent = r.content.decode().replace("\n", "").replace(" ", "")

        if ModuleHash == onlineContent:
            print("Continue")
            exec(ModuleContent)
        else:
            print(repr(ModuleHash))
            print(repr(onlineContent))
            print("local version is outdated or tampered with")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuModules.setTitle(_translate("MainWindow", "Modules"))
        self.actionCheck_For_Updates.setText(_translate("MainWindow", "Check For Updates"))
        self.action_ModuleStore.setText(_translate("MainWindow", "Module Store"))
        self.action_ModulePlaceHolder.setText(_translate("MainWindow", "{ModuleName}"))
        self.actionReport.setText(_translate("MainWindow", "Report"))
        self.actionContact.setText(_translate("MainWindow", "Contact"))
        self.actionQuit.setText(_translate("MainWindow", "Quit"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
